meta:
  isa_name: RV32I
  isa_family: RISC-V
  description: "RV32I integer base"
  extends: rv32_base.yaml
<<: *common_rules

fields:
  opcode:
    width: 7
    type: opcode
    segments:
      - { lsb: 0, width: 7 }
  rd:
    width: 5
    type: reg
    segments:
      - { lsb: 7, width: 5 }
  funct3:
    width: 3
    type: enum
    segments:
      - { lsb: 12, width: 3 }
  rs1:
    width: 5
    type: reg
    segments:
      - { lsb: 15, width: 5 }
  rs2:
    width: 5
    type: reg
    segments:
      - { lsb: 20, width: 5 }
  funct7:
    width: 7
    type: enum
    segments:
      - { lsb: 25, width: 7 }
  imm_i:
    width: 12
    type: imm
    signed: true
    segments:
      - { lsb: 20, width: 12 }
  imm_s:
    width: 12
    type: imm
    signed: true
    segments:
      - { lsb: 7, width: 5, value_lsb: 0 }
      - { lsb: 25, width: 7, value_lsb: 5 }

formats:
  <<: *riscv_formats

instructions:


  ADD:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b000, funct7: 0b0000000 } }
  SUB:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b000, funct7: 0b0100000 } }
  XOR:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b100, funct7: 0b0000000 } }
  OR:     { format: R, fixed: { opcode: 0b0110011, funct3: 0b110, funct7: 0b0000000 } }
  AND:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b111, funct7: 0b0000000 } }
  SLL:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b001, funct7: 0b0000000 } }
  SRL:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b101, funct7: 0b0000000 } }
  SRA:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b101, funct7: 0b0100000 } }
  SLT:    { format: R, fixed: { opcode: 0b0110011, funct3: 0b010, funct7: 0b0000000 } }
  SLTU:   { format: R, fixed: { opcode: 0b0110011, funct3: 0b011, funct7: 0b0000000 } }

  ADDI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b000 } }
  XORI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b100 } }
  ORI:    { format: I, fixed: { opcode: 0b0010011, funct3: 0b110 } }
  ANDI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b111 } }
  SLLI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b001 } }
  SRLI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b101 } }
  SRAI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b101 } }
  SLTI:   { format: I, fixed: { opcode: 0b0010011, funct3: 0b010 } }
  SLTIU:  { format: I, fixed: { opcode: 0b0010011, funct3: 0b011 } }


  LB:     { format: I, fixed: { opcode: 0b0000011, funct3: 0b000 } }
  LH:     { format: I, fixed: { opcode: 0b0000011, funct3: 0b001 } }
  LW:     { format: I, fixed: { opcode: 0b0000011, funct3: 0b010 } }
  LBU:    { format: I, fixed: { opcode: 0b0000011, funct3: 0b100 } }
  LHU:    { format: I, fixed: { opcode: 0b0000011, funct3: 0b101 } }

  SB:     { format: S, fixed: { opcode: 0b0100011, funct3: 0b000 } }
  SH:     { format: S, fixed: { opcode: 0b0100011, funct3: 0b001 } }
  SW:     { format: S, fixed: { opcode: 0b0100011, funct3: 0b010 } }

  BEQ:    { format: B, fixed: { opcode: 0b1100011, funct3: 0b000 } }
  BNE:    { format: B, fixed: { opcode: 0b1100011, funct3: 0b001 } }
  BLT:    { format: B, fixed: { opcode: 0b1100011, funct3: 0b100 } }
  BGE:    { format: B, fixed: { opcode: 0b1100011, funct3: 0b101 } }
  BLTU:   { format: B, fixed: { opcode: 0b1100011, funct3: 0b110 } }
  BGEU:   { format: B, fixed: { opcode: 0b1100011, funct3: 0b111 } }

  JAL:    { format: J, fixed: { opcode: 0b1101111 } }
  JALR:   { format: I, fixed: { opcode: 0b1100111, funct3: 0b000 } }

  LUI:    { format: U, fixed: { opcode: 0b0110111 } }
  AUIPC:  { format: U, fixed: { opcode: 0b0010111 } }

  ECALL:  { format: I, fixed: { opcode: 0b1110011, funct3: 0b000, rd: 0, rs1: 0, imm_i: 0 } }
  EBREAK: { format: I, fixed: { opcode: 0b1110011, funct3: 0b000, rd: 0, rs1: 0, imm_i: 1 } }  